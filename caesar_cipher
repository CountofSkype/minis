Приложение "Шифр цезаря." Используется для шифровки/дешифровки сообщения сдвигом вправо.
 * проверка правильности введенных данных
 * работает с русским/английским языками
 * возможность начать работу со следующим сообщением
 * указано решение для известного диапазона значений сдвига (для конкретного значения сдвига закомментировать 97-104, 107-108 и раскомментировать 70-76, 109)
 ___________________________________________________________________________________________________________________________________________________________________________________
 
def isvalid(key):
    if key.isdigit():
        return True


def caesar(language, direction, key, text):
    if language == 'русский':
        data = {'first_upper': ord('А'),
                'first_lower': ord('а'),
                'last_upper': ord('Я'),
                'last_lower': ord('я'),
                'len_alphabet': 32}
    elif language == 'английский':
        data = {'first_upper': ord('A'),
                'first_lower': ord('a'),
                'last_upper': ord('Z'),
                'last_lower': ord('z'),
                'len_alphabet': 26}

    text_final = ''
    if direction == 'шифровка':
        for c in text:
            if c.isalpha():
                crypt_char = ord(c) + key
                if c.isupper():
                    if crypt_char > data['last_upper']:
                        crypt_char -= data['len_alphabet']
                elif c.islower():
                    if crypt_char > data['last_lower']:
                        crypt_char -= data['len_alphabet']
                text_final += chr(crypt_char)
            else:
                text_final += c
    elif direction == 'дешифровка':
        for c in text:
            if c.isalpha():
                crypt_char = ord(c) - key
                if c.isupper():
                    if crypt_char < data['first_upper']:
                        crypt_char += data['len_alphabet']
                elif c.islower():
                    if crypt_char < data['first_lower']:
                        crypt_char += data['len_alphabet']
                text_final += chr(crypt_char)
            else:
                text_final += c
    return text_final


def main_():
    while True:
        language = input('Укажите язык сообщения (русский/английский):\n')
        if language not in ('русский', 'английский'):
            print('Неправильно указан язык')
            continue
        break
    while True:
        direction = input('Какое действие необходимо выполнить (шифровка/дешифровка)?\n')
        if direction not in ('шифровка', 'дешифровка'):
            print('Я не умею выполнять данное действие')
            continue
        break
    #   while True:
    #     key = input('Укажите ключ (число):\n')
    #     if not isvalid(key):
    #         print('Неверное значение ключа. Повторите ввод')
    #         continue
    #     key = int(key)
    #     break
    while True:
        text = input('Введите сообщение:\n')
        if language == 'русский':
            for c in text:
                if c.isalpha():
                    if not ord('А') <= ord(c) <= ord('я'):
                        print('Вы указали "русский", а вводите непонятно что!')
                        break
            else:
                break
            continue
        if language == 'английский':
            for c in text:
                if c.isalpha():
                    if not ord('A') <= ord(c) <= ord('z'):
                        print('Вы указали "английский", а вводите непонятно что!')
                        break
            else:
                break
            continue
    while True:
      a = input('Укажите начальное значение:\n')
      b = input('Укажите конечное значение:\n')
      if not isvalid(a) or not isvalid(b):
          print('Неверный диапазон')
          continue
      a, b = int(a), int(b)
      break
    print('Выполняю заданную задачу...')
    print('Готово!\nВаше сообщение:')
    for i in range(a, b + 1):
        print(caesar(language, direction, i, text))
    # print(caesar(language, direction, key, text))
    print('**********************************************************************************************')


print('**********************************************************************************************\n')
print('''                              Здравствуй, пользователь!\n
    Данная программа предназначена для шифровки/дешифровки сообщений при помощи шифра Цезаря.
    Для того, чтобы ей воспользоваться необходимо ввести направление работы, указать язык, на
    котором ваше сообщение написано, а также указать ключ (значение сдвига).''', '\n')
print('**********************************************************************************************')
while True:
    main_()
    more = input('Выполнить новую задачу?\n')
    if more.lower() == 'да':
        continue
    print('Спасибо, что воспользовались данной программой!')
    break

______________________________________________________________________________________________________________________________________________________________________________
Реализация шифра Цезаря с ключом, равным длине слова, на примере английского текста:



data = {'first_upper': ord('A'),
        'first_lower': ord('a'),
        'last_upper': ord('Z'),
        'last_lower': ord('z'),
        'len_alphabet': 26}


def caesar(key, text):
    text_final = ''
    for i in range(len(text.split())):
        for c in text.split()[i]:
            if c.isalpha():
                crypt_char = ord(c) + key[i]
                if c.isupper():
                    if crypt_char > data['last_upper']:
                        crypt_char -= data['len_alphabet']
                elif c.islower():
                    if crypt_char > data['last_lower']:
                        crypt_char -= data['len_alphabet']
                text_final += chr(crypt_char)
            else:
                text_final += c
        text_final += ' '
    return text_final


def main_():
    while True:
        text = input('Enter your message:\n')
        for c in text:
            if c.isalpha():
                if not ord('A') <= ord(c) <= ord('z'):
                    print('You should use english letters only!')
                    break
        else:
            break
        continue 
    text_k = text.split()
    keys = []
    for ch in text_k:
        len_ch = 0
        for char in ch:
            if char.isalpha():
                len_ch += 1
        keys.append(len_ch)
    print(caesar(keys, text))

    
main_()

________________________________________________________________________________________________________________________________________________________________________________
Функция caesar(text, key, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'), возвращающая зашифрованный текст, работающую только с заданным алфавитом.

text - исходных текст, который надо зашифровать (или расшифровать)
key - ключ (сдвиг)
Ключ может быть любым числом

Из преобразуемого текста удаляются все пробелы и знаки препинания. Зашифрованный текст пишется в верхнем регистре 1 строкой.
________________________________________________________________________________________________________________________________________________________________________________

def caesar(text, key, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'):
    decrypted = ''
    for c in text:
        if c.isalpha() or c.isdigit():
            decrypted += alphabet[(alphabet.index(c.upper()) + key) % len(alphabet)].upper()
    return decrypted

________________________________________________________________________________________________________________________________________________________________________________
Шифр Цезаря довольно легко поддаётся взлому с помощью грубой силы. Достаточно перебрать все варианты расшифровки текста (их столько, каковой длины будет словарь).
Функция bruteforce(text, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'), которая выводит на печать все возможные "расшифровки" исходного текста.

Если алфавит не передан на вход функции, то считается, что текст на английском.
Порядок вывода расшифровок от сдвига "-1" по убыванию (-1, -2, -3...)
________________________________________________________________________________________________________________________________________________________________________________

def bruteforce(text, alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'):    
    for i in range(-1, -len(alphabet), -1):
        decrypted = ''
        for c in text:
            if c.isalpha() or c.isdigit():
                decrypted += alphabet[(alphabet.index(c.upper()) + i) % len(alphabet)].upper()
        print(decrypted)

________________________________________________________________________________________________________________________________________________________________________________
"Шифр Вижинера".
Функция jarriquez_encryption(text, key, alphabet='ABCDEFGHIJKLMNOPQRSTUVWXYZ', reverse=False) возвращает зашифрованный текст, по следующему алгоритму:

Предположим, что число состоит из трех цифр, например 4, 2 и 3. Подписываем это число 423 под строчкой так, чтобы под каждой буквой стояла цифра, и повторяем число, пока
не дойдем до конца фразы. Затем будем заменять каждую букву нашей фразы той буквой, которая стоит после нее в алфавитном порядке на месте, указанном цифрой. 
Например, если под буквой А стоит цифра 3, вы отсчитываете три буквы и заменяете ее буквой Г.

text - исходный текст
key - ключ шифрования (число)
alphabet - алфавит (по умолчанию английский)
reverse - признак расшифровки, если находится в значении True, это значит, что функцию надо использовать для расшифровки текста, т.к. каждый сдвиг должен быть отрицательным
(по умолчанию False)

Из преобразуемого текста удаляются все пробелы и знаки препинания. Зашифрованный текст пишется в верхнем регистре 1 строкой.
________________________________________________________________________________________________________________________________________________________________________________

def vizhiner_encryption(text, key, alphabet='ABCDEFGHIJKLMNOPQRSTUVWXYZ', reverse=False):
    decrypted = ''
    i = 0
    for c in text:
        if i == len(str(key)):
            i = 0
        if c.isalpha() or c.isdigit():
            if reverse:
                decrypted += alphabet[(alphabet.index(c.upper()) - int(str(key)[i])) % len(alphabet)].upper()
            else:
                decrypted += alphabet[(alphabet.index(c.upper()) + int(str(key)[i])) % len(alphabet)].upper()
            i += 1
    return decrypted

________________________________________________________________________________________________________________________________________________________________________________
"Цилиндр Джеферсона"
Цилиндр Джеферсона - это механический шифровальный аппарат, который состоит из нескольких дисков, на которых записаны алфавиты (состоящие из одинаковых символов,
но в случайном порядке).

Для шифрования с его помощью текст разбивают на блоки, длина каждого блока равна числу дисков в механизме.
Каждый символ блока шифруется с помощью алгоритма Цезаря с использованием соответствующего диска (т.е. 1й символ с помощью 1 диска, 2й символ с помощью 2 диска и т.д.)
с общим сдвигом.
Таким образом сдвиг (ключ для шифрования Цезаря) не является секретом для цилиндра Джеферсона - цилиндры легко повернуть вокруг оси и на них видны сразу все комбинации
расшифровки, так что даже не требуется брутфорс. Однако, если сами цилиндры (а значит и порядок символов в алфавитах) хранятся в секрете, а так же в секрете порядок
следования алфавитов, то такой метод шифрования очень надёжен.

Переменная clear_alphabet содержит исходный алфавит
Переменная n содержит число
 
Список n новых алфавитов в переменной discs.

Функция jefferson_encryption(text, discs, step, reverse=False), реализующую "цилиндр Джеферсона"

text - исходный текст
discs - список из словарей (строк)
step - сдвиг на которых смещаются символы с помощью алгоритма Цезаря (ключ шифрования для шифра Цезаря)
reverse - признак расшифровки, если находится в значении True, это значит, что функцию надо использовать для расшифровки текста,
т.к. каждый сдвиг должен быть отрицательным. (по умолчанию False)
________________________________________________________________________________________________________________________________________________________________________________

def disc_generator(alphabet):
    alphabet = list(alphabet)
    random.shuffle(alphabet)
    return ''.join(alphabet)


discs = [disc_generator(clear_alphabet) for i in range(n)]

def jefferson_encryption(text, discs, step, reverse=False):
    decrypted = ''
    i = 0
    for c in text:
        if i == n:
            i = 0
        if c.isalpha() or c.isdigit():
            if reverse:
                decrypted += discs[i][(discs[i].index(c.upper()) - step) % len(clear_alphabet)].upper()
            else:
                decrypted += discs[i][(discs[i].index(c.upper()) + step) % len(clear_alphabet)].upper()
            i += 1
    return decrypted
